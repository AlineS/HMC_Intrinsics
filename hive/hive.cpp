/**
 * Aline Santana Cordeiro - ascordeiro@inf.ufpr.br
 * LSE - Embedded Sistems Laboratory - 2018
 * PPGInf - Federal University of Paraná
 */

#include "hive.hpp"

__hi32s *a32s64, *b32s64, *c32s64, *a32s2K, *b32s2K, *c32s2K;
__hi32u *a32u64, *b32u64, *c32u64, *a32u2K, *b32u2K, *c32u2K;
__hi64s *a64s32, *b64s32, *c64s32, *a64s1K, *b64s1K, *c64s1K;
__hi64u *a64u32, *b64u32, *c64u32, *a64u1K, *b64u1K, *c64u1K;

int main() {
    srand(time(NULL));

    a32s64 = (__hi32s *) malloc(sizeof(__hi32s) * HI64I);
    b32s64 = (__hi32s *) malloc(sizeof(__hi32s) * HI64I);
    c32s64 = (__hi32s *) malloc(sizeof(__hi32s) * HI64I);

    a32u64 = (__hi32u *) malloc(sizeof(__hi32u) * HI64I);
    b32u64 = (__hi32u *) malloc(sizeof(__hi32u) * HI64I);
    c32u64 = (__hi32u *) malloc(sizeof(__hi32u) * HI64I);

    for (int i = 0; i < HI64I; i++) {
        a32s64[i] = 1 + (1 + (rand() % 10)); b32s64[i] = 1 + (rand() % 10);
        a32u64[i] = 1 + (1 + (rand() % 10)); b32u64[i] = 1 + (rand() % 10);
    }

    a32s2K = (__hi32s *) malloc(sizeof(__hi32s) * HI2KI);
    b32s2K = (__hi32s *) malloc(sizeof(__hi32s) * HI2KI);
    c32s2K = (__hi32s *) malloc(sizeof(__hi32s) * HI2KI);

    a32u2K = (__hi32u *) malloc(sizeof(__hi32u) * HI2KI);
    b32u2K = (__hi32u *) malloc(sizeof(__hi32u) * HI2KI);
    c32u2K = (__hi32u *) malloc(sizeof(__hi32u) * HI2KI);

    for (int i = 0; i < HI2KI; i++) {
        a32s2K[i] = 1 + (rand() % 10); b32s2K[i] = 1 + (rand() % 10);
        a32u2K[i] = 1 + (rand() % 10); b32u2K[i] = 1 + (rand() % 10);
    }

    a64s32 = (__hi64s *) malloc(sizeof(__hi64s) * HI32L);
    b64s32 = (__hi64s *) malloc(sizeof(__hi64s) * HI32L);
    c64s32 = (__hi64s *) malloc(sizeof(__hi64s) * HI32L);

    a64u32 = (__hi64u *) malloc(sizeof(__hi64u) * HI32L);
    b64u32 = (__hi64u *) malloc(sizeof(__hi64u) * HI32L);
    c64u32 = (__hi64u *) malloc(sizeof(__hi64u) * HI32L);

    for (int i = 0; i < HI32L; i++) {
        a64s32[i] = 1 + (rand() % 10); b64s32[i] = 1 + (rand() % 10);
        a64u32[i] = 1 + (rand() % 10); b64u32[i] = 1 + (rand() % 10);
    }

    a64s1K = (__hi64s *) malloc(sizeof(__hi64s) * HI1KL);
    b64s1K = (__hi64s *) malloc(sizeof(__hi64s) * HI1KL);
    c64s1K = (__hi64s *) malloc(sizeof(__hi64s) * HI1KL);

    a64u1K = (__hi64u *) malloc(sizeof(__hi64u) * HI1KL);
    b64u1K = (__hi64u *) malloc(sizeof(__hi64u) * HI1KL);
    c64u1K = (__hi64u *) malloc(sizeof(__hi64u) * HI1KL);

    for (int i = 0; i < HI1KL; i++) {
        a64s1K[i] = 1 + (rand() % 10); b64s1K[i] = 1 + (rand() % 10);
        a64u1K[i] = 1 + (rand() % 10); b64u1K[i] = 1 + (rand() % 10);
    }

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 01 *");
    printf("%s\n", "***************");

    _hive64_adds(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 02 *");
    printf("%s\n", "***************");

    _hive2K_adds(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 03 *");
    printf("%s\n", "***************");

    _hive64_addu(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 04 *");
    printf("%s\n", "***************");

    _hive2K_addu(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 05 *");
    printf("%s\n", "***************");

    _hive64_subs(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 06 *");
    printf("%s\n", "***************");

    _hive2K_subs(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 07 *");
    printf("%s\n", "***************");

    _hive64_subu(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 08 *");
    printf("%s\n", "***************");

    _hive2K_subu(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 09 *");
    printf("%s\n", "***************");

    _hive64_abs(c32s64, b32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 10 *");
    printf("%s\n", "***************");

    _hive2K_abs(c32s2K, b32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 11 *");
    printf("%s\n", "***************");

    _hive64_max(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 12 *");
    printf("%s\n", "***************");

    _hive2K_max(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 13 *");
    printf("%s\n", "***************");

    _hive64_min(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 14 *");
    printf("%s\n", "***************");

    _hive2K_min(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 15 *");
    printf("%s\n", "***************");

    _hive64_and(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 16 *");
    printf("%s\n", "***************");

    _hive2K_and(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/
    printf("%s\n", "***************");
    printf("%s\n", "* Operação 17 *");
    printf("%s\n", "***************");

    _hive64_or(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 18 *");
    printf("%s\n", "***************");

    _hive2K_or(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 19 *");
    printf("%s\n", "***************");

    _hive64_xor(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 20 *");
    printf("%s\n", "***************");

    _hive2K_xor(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 21 *");
    printf("%s\n", "***************");

    _hive64_not(a32s64, b32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 22 *");
    printf("%s\n", "***************");

    _hive2K_not(a32s2K, b32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 23 *");
    printf("%s\n", "***************");

    _hive64_masks(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 24 *");
    printf("%s\n", "***************");

    _hive2K_masks(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 25 *");
    printf("%s\n", "***************");

    _hive64_masku(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 26 *");
    printf("%s\n", "***************");

    _hive2K_masku(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 27 *");
    printf("%s\n", "***************");

    _hive64_slts(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 28 *");
    printf("%s\n", "***************");

    _hive2K_slts(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 29 *");
    printf("%s\n", "***************");

    _hive64_sltu(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 30 *");
    printf("%s\n", "***************");

    _hive2K_sltu(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 31 *");
    printf("%s\n", "***************");

    _hive64_cmpeqs(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 32 *");
    printf("%s\n", "***************");

    _hive2K_cmpeqs(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/
    printf("%s\n", "***************");
    printf("%s\n", "* Operação 33 *");
    printf("%s\n", "***************");

    _hive64_cmpequ(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 34 *");
    printf("%s\n", "***************");

    _hive2K_cmpequ(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 35 *");
    printf("%s\n", "***************");

    _hive64_sll(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 36 *");
    printf("%s\n", "***************");

    _hive2K_sll(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 37 *");
    printf("%s\n", "***************");

    _hive64_srl(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 38 *");
    printf("%s\n", "***************");

    _hive2K_srl(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 39 *");
    printf("%s\n", "***************");

    _hive64_sra(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 40 *");
    printf("%s\n", "***************");

    _hive2K_sra(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 41 *");
    printf("%s\n", "***************");

    _hive64_divs(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 42 *");
    printf("%s\n", "***************");

    _hive2K_divs(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 43 *");
    printf("%s\n", "***************");

    _hive64_divu(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 44 *");
    printf("%s\n", "***************");

    _hive2K_divu(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 45 *");
    printf("%s\n", "***************");

    _hive64_mods(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 46 *");
    printf("%s\n", "***************");

    _hive2K_mods(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 47 *");
    printf("%s\n", "***************");

    _hive64_modu(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 48 *");
    printf("%s\n", "***************");

    _hive2K_modu(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 49 *");
    printf("%s\n", "***************");

    _hive64_mults(a32s64, b32s64, c32s64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 50 *");
    printf("%s\n", "***************");

    _hive2K_mults(a32s2K, b32s2K, c32s2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 51 *");
    printf("%s\n", "***************");

    _hive64_multu(a32u64, b32u64, c32u64);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 52 *");
    printf("%s\n", "***************");

    _hive2K_multu(a32u2K, b32u2K, c32u2K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 53 *");
    printf("%s\n", "***************");

    _hive32_mults(a64s1K, b64s1K, c64s1K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 54 *");
    printf("%s\n", "***************");

    _hive1K_mults(a64s1K, b64s1K, c64s1K);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 55 *");
    printf("%s\n", "***************");

    _hive32_multu(a64u32, b64u32, c64u32);

/*****************************************************************************/

    printf("%s\n", "***************");
    printf("%s\n", "* Operação 56 *");
    printf("%s\n", "***************");

    _hive1K_multu(a64u1K, b64u1K, c64u1K);

    return 0;
}
